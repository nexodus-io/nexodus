---
# tasks file for create-zone
- name: Update repo cache
  become: yes
  apt:
    update_cache: yes

- name: Install jq
  become: yes
  apt:
    name:
      - jq
      - mkcert
    state: latest

- name: Create the certs dir
  shell: |
    mkdir -p .certs

- name: Copy rootCA.pem
  copy:
    src: rootCA.pem
    dest: .certs/
    mode: 0644

- name: Create the certs dir
  shell: |
    mkdir -p .certs

- name: mkcert
  shell: |
    CAROOT=/home/{{ ansible_user }}/.certs mkcert -install

- name: Kill any existing nexd process from previous runs
  shell: |
    sudo killall nexd 2> /dev/null
  ignore_errors: yes

# Comment out the next two blocks and define "{{ controller_address }}" in vars.yml
# if you are using a seperate api-server and not provisioning via Ansible
#- name: Set the controller address fact
#  set_fact:
#    controller_address: "{{ hostvars[groups['apiServerNode'][0]]['inventory_hostname'] }}"

- name: Print the API Server IP
  debug:
    msg: "{{ controller_address }}"

- name: Delete hosts file
  become: yes
  shell: |
    sudo rm -rf /etc/hosts
    sudo touch /etc/hosts
  ignore_errors: yes

- name: Add controller host entry
  become: yes
  ansible.builtin.blockinfile:
    path: /etc/hosts
    block: |
      127.0.0.1 localhost
      ::1 ip6-localhost ip6-loopback
      fe00::0 ip6-localnet
      ff00::0 ip6-mcastprefix
      ff02::1 ip6-allnodes
      ff02::2 ip6-allrouters
      ff02::3 ip6-allhosts
      {{ controller_address }} auth.try.nexodus.127.0.0.1.nip.io api.try.nexodus.127.0.0.1.nip.io try.nexodus.127.0.0.1.nip.io

# Optionally clean all remnants of a previous run (agent will do this as well)
- name: Delete wg0
  become: yes
  shell: |
    sudo ip link del wg0
  ignore_errors: yes

- name: Download the Nexodus Agent Binary
  shell: |
    sudo curl {{ nexodus_binary }} --output /usr/local/sbin/nexd
    sudo chmod +x /usr/local/sbin/nexd

# Example Token Acquisition
#  curl -s -f -X POST https://auth.try.nexodus.127.0.0.1.nip.io/realms/nexodus/protocol/openid-connect/token \
#      -H 'Content-Type: application/x-www-form-urlencoded' \
#      -d "username=kitteh1" \
#      -d "password=floofykittens" \
#      -d "grant_type=password" \
#      -d "scope=openid profile email" \
#      -d "client_id=nexodus-cli"

- name: Create a JWT
  shell: |
    curl -s -f -X POST \
      {{ nexodus_oidc_url }}/realms/nexodus/protocol/openid-connect/token \
      -H 'Content-Type: application/x-www-form-urlencoded' \
      -d "username={{ nexodus_auth_uid }}" \
      -d "password={{ nexodus_auth_password }}" \
      -d "grant_type=password" \
      -d "scope=openid profile email" \
      -d "client_id={{ nexodus_oidc_client_id_cli }}"
  register: api_token

- name: Print the JWT Token
  debug:
    var: api_token.stdout

- name: Create the Zone and register the UUID
  shell: |
    curl -fL -X POST '{{ nexodus_api_url }}/api/zones' \
    -H "Authorization: bearer {{ (api_token.stdout|from_json).access_token }}" \
    -H "Content-Type: application/json" \
    --data-raw '{"Name": "{{ nexodus_zone_name }}", "Description": "Hub/Spoke Zone", "cidr": "{{ nexodus_zone_prefix }}", "hub_zone": true}'
  register: zone_uuid

- name: Print the Zone UUID
  debug:
    var: (zone_uuid.stdout|from_json).id

- name: Patch the User to the Zone
  shell: |
    curl -fL -X PATCH '{{ nexodus_api_url }}/api/users/me' \
        -H "Authorization: bearer {{ (api_token.stdout|from_json).access_token }}" \
        -H "Content-Type: application/json" \
        --data-raw '{ "zone_id": "{{ (zone_uuid.stdout|from_json).id }}" }'
