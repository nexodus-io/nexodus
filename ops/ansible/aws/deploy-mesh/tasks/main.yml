---
# tasks file for deploy-mesh
- name: Update repo cache
  become: yes
  apt:
    update_cache: yes

- name: Install dependencies
  become: yes
  apt:
    name:
      - wireguard
      - jq
      - fping
      - iperf3
      - mkcert
    state: latest

- name: Create the certs dir
  shell: |
    mkdir -p .certs

- name: Copy rootCA.pem
  copy:
    src: ./rootCA.pem
    dest: .certs/
    mode: 0644

- name: Create the certs dir
  shell: |
    mkdir -p .certs

- name: mkcert
  shell: |
    CAROOT=/home/{{ ansible_user }}/.certs mkcert -install

- name: Kill any existing apexd process from previous runs
  shell: |
    sudo killall apexd 2> /dev/null
  ignore_errors: yes

- name: Delete hosts file
  become: yes
  shell: |
    sudo rm -rf /etc/hosts
    sudo touch /etc/hosts
  ignore_errors: yes

- name: Add controller host entry
  become: yes
  ansible.builtin.blockinfile:
    path: /etc/hosts
    block: |
      127.0.0.1 localhost
      ::1 ip6-localhost ip6-loopback
      fe00::0 ip6-localnet
      ff00::0 ip6-mcastprefix
      ff02::1 ip6-allnodes
      ff02::2 ip6-allrouters
      ff02::3 ip6-allhosts
      {{ controller_address }} auth.apex.local api.apex.local apex.local

- name: Delete wg0
  become: yes
  shell: |
    sudo ip link del wg0
  ignore_errors: yes

# Example Token Acquisition
#  curl -s -f -X POST https://auth.apex.local/realms/apex/protocol/openid-connect/token \
#      -H 'Content-Type: application/x-www-form-urlencoded' \
#      -d "username=kitteh1" \
#      -d "password=floofykittens" \
#      -d "grant_type=password" \
#      -d "scope=openid profile email" \
#      -d "client_id=apex-cli"

- name: Create a JWT
  shell: |
    curl -s -f -X POST \
      {{ apex_oidc_url }}/realms/apex/protocol/openid-connect/token \
      -H 'Content-Type: application/x-www-form-urlencoded' \
      -d "username={{ apex_auth_uid }}" \
      -d "password={{ apex_auth_password }}" \
      -d "grant_type=password" \
      -d "scope=openid profile email" \
      -d "client_id={{ apex_oidc_client_id_cli }}"
  register: api_token

- name: Print the JWT Token (uncomment for debugging)
  debug:
    var: api_token.stdout

- name: Copy the verifier script
  copy:
    src: verify-connectivity.sh
    dest: /home/{{ ansible_user }}/
    mode: '0755'
  ignore_errors: yes

- name: Download the Apex Agent Binary
  shell: |
    sudo curl {{ apex_binary }} --output /usr/local/sbin/apex
    sudo chmod +x /usr/local/sbin/apex

- name: Attach the Node Agent to the Controller
  become: yes
  shell: |
    apexd \
    --with-token='{{ api_token.stdout }}' \
    {{ apex_url }} > apex-logs.txt 2>&1 &
