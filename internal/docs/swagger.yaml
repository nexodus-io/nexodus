basePath: /api
definitions:
  models.AddDevice:
    type: object
  models.AddOrganization:
    properties:
      cidr:
        example: 172.16.42.0/24
        type: string
      description:
        example: The Red Zone
        type: string
      hub_zone:
        type: boolean
      name:
        example: zone-red
        type: string
    type: object
  models.BaseError:
    properties:
      error:
        example: something bad
        type: string
    type: object
  models.Device:
    properties:
      allowed_ips:
        items:
          type: string
        type: array
      child_prefix:
        items:
          type: string
        type: array
      endpoint_local_address_ip4:
        type: string
      hostname:
        type: string
      id:
        example: aa22666c-0f57-45cb-a449-16efecc04f2e
        type: string
      local_ip:
        type: string
      organization_id:
        type: string
      organization_prefix:
        type: string
      public_key:
        type: string
      reflexive_ip4:
        type: string
      relay:
        type: boolean
      symmetric_nat:
        type: boolean
      tunnel_ip:
        type: string
      user_id:
        type: string
    type: object
  models.Organization:
    properties:
      description:
        type: string
      devices:
        items:
          $ref: '#/definitions/models.Device'
        type: array
      hubZone:
        type: boolean
      id:
        example: aa22666c-0f57-45cb-a449-16efecc04f2e
        type: string
      ipCidr:
        type: string
      name:
        type: string
      users:
        items:
          $ref: '#/definitions/models.User'
        type: array
    type: object
  models.UpdateDevice:
    properties:
      child_prefix:
        example:
        - 172.16.42.0/24
        items:
          type: string
        type: array
      endpoint_local_address_ip4:
        example: 1.2.3.4
        type: string
      hostname:
        example: myhost
        type: string
      local_ip:
        example: 10.1.1.1
        type: string
      organization_id:
        example: 694aa002-5d19-495e-980b-3d8fd508ea10
        type: string
      reflexive_ip4:
        type: string
      symmetric_nat:
        type: boolean
    type: object
  models.User:
    properties:
      createdAt:
        type: string
      devices:
        items:
          $ref: '#/definitions/models.Device'
        type: array
      id:
        description: Since the ID comes from the IDP, we have no control over the
          format...
        example: aa22666c-0f57-45cb-a449-16efecc04f2e
        type: string
      organizations:
        items:
          $ref: '#/definitions/models.Organization'
        type: array
      updatedAt:
        type: string
      userName:
        type: string
    type: object
info:
  contact:
    name: The Nexodus Authors
    url: https://github.com/nexodus-io/nexodus/issues
  description: This is the Nexodus API Server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Nexodus API
  version: "1.0"
paths:
  /devices:
    get:
      description: Lists all devices
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Device'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.BaseError'
        "429":
          description: Too Many Requests
          schema:
            $ref: '#/definitions/models.BaseError'
      summary: List Devices
      tags:
      - Devices
    post:
      description: Adds a new device
      parameters:
      - description: Add Device
        in: body
        name: device
        required: true
        schema:
          $ref: '#/definitions/models.AddDevice'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Device'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.BaseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.BaseError'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/models.Device'
        "429":
          description: Too Many Requests
          schema:
            $ref: '#/definitions/models.BaseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BaseError'
      summary: Add Devices
      tags:
      - Devices
  /devices/{id}:
    delete:
      description: Deletes an existing device and associated IPAM lease
      parameters:
      - description: Device ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/models.Device'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.BaseError'
        "429":
          description: Too Many Requests
          schema:
            $ref: '#/definitions/models.BaseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BaseError'
      summary: Delete Device
      tags:
      - Devices
    get:
      description: Updates a device by ID
      parameters:
      - description: Device ID
        in: path
        name: id
        required: true
        type: string
      - description: Device Update
        in: body
        name: update
        required: true
        schema:
          $ref: '#/definitions/models.UpdateDevice'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Device'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.BaseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.BaseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.BaseError'
        "429":
          description: Too Many Requests
          schema:
            $ref: '#/definitions/models.BaseError'
      summary: Update Devices
      tags:
      - Devices
  /fflags:
    get:
      description: Lists all feature flags
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: boolean
            type: object
        "429":
          description: Too Many Requests
          schema:
            $ref: '#/definitions/models.BaseError'
      summary: List Feature Flags
      tags:
      - FFlag
  /fflags/{name}:
    get:
      description: Gets a Feature Flag by name
      parameters:
      - description: feature flag name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: boolean
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.BaseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.BaseError'
        "429":
          description: Too Many Requests
          schema:
            $ref: '#/definitions/models.BaseError'
      summary: Get Feature Flag
      tags:
      - FFlag
  /organizations:
    get:
      description: Lists all Organizations
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Organization'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.BaseError'
        "429":
          description: Too Many Requests
          schema:
            $ref: '#/definitions/models.BaseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BaseError'
      summary: List Organizations
      tags:
      - Organization
    post:
      consumes:
      - application/json
      description: Creates a named organization with the given CIDR
      parameters:
      - description: Add Organization
        in: body
        name: Organization
        required: true
        schema:
          $ref: '#/definitions/models.AddOrganization'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Organization'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.BaseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.BaseError'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/models.BaseError'
        "429":
          description: Too Many Requests
          schema:
            $ref: '#/definitions/models.BaseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BaseError'
      summary: Create a Organization
      tags:
      - Organization
  /organizations/{id}:
    delete:
      description: Deletes an existing organization and associated IPAM prefix
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/models.Organization'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.BaseError'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/models.BaseError'
        "429":
          description: Too Many Requests
          schema:
            $ref: '#/definitions/models.BaseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BaseError'
      summary: Delete Organization
      tags:
      - Organizations
    get:
      description: Gets a Organization by Organization ID
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Organization'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.BaseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.BaseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.BaseError'
        "429":
          description: Too Many Requests
          schema:
            $ref: '#/definitions/models.BaseError'
      summary: Get Organizations
      tags:
      - Organization
  /organizations/{id}/devices:
    get:
      description: Lists all devices for this Organization
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Device'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.BaseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.BaseError'
        "429":
          description: Too Many Requests
          schema:
            $ref: '#/definitions/models.BaseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BaseError'
      summary: List Devices
      tags:
      - Devices
  /organizations/{organization_id}/devices/{device_id}:
    get:
      description: Gets a device in a organization by ID
      parameters:
      - description: Organization ID
        in: path
        name: organization_id
        required: true
        type: string
      - description: Device ID
        in: path
        name: device_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Device'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.BaseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.BaseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.BaseError'
        "429":
          description: Too Many Requests
          schema:
            $ref: '#/definitions/models.BaseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BaseError'
      summary: Get Device
      tags:
      - Devices
  /users:
    get:
      description: Lists all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.BaseError'
        "429":
          description: Too Many Requests
          schema:
            $ref: '#/definitions/models.BaseError'
      summary: List Users
      tags:
      - User
  /users/{id}:
    delete:
      description: Delete a user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.BaseError'
        "429":
          description: Too Many Requests
          schema:
            $ref: '#/definitions/models.BaseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BaseError'
      summary: Delete User
      tags:
      - User
    get:
      description: Gets a user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.BaseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.BaseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.BaseError'
        "429":
          description: Too Many Requests
          schema:
            $ref: '#/definitions/models.BaseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BaseError'
      summary: Get User
      tags:
      - User
securityDefinitions:
  OAuth2Implicit:
    authorizationUrl: https://auth.try.nexodus.local/
    flow: implicit
    scopes:
      admin: ' Grants read and write access to administrative information'
      user: ' Grants read and write access to resources owned by this user'
    type: oauth2
swagger: "2.0"
