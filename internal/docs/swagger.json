{
    "swagger": "2.0",
    "info": {
        "description": "This is the Nexodus API Server.",
        "title": "Nexodus API",
        "contact": {
            "name": "The Nexodus Authors",
            "url": "https://github.com/nexodus-io/nexodus/issues"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "basePath": "/",
    "paths": {
        "/api/ServiceNetworks/{id}/sites": {
            "get": {
                "description": "Lists all sites for this ServiceNetwork",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ServiceNetwork"
                ],
                "summary": "List Sites",
                "operationId": "ListSitesInServiceNetwork",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "greater than revision",
                        "name": "gt_revision",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Service Network ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Site"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            }
        },
        "/api/ca/sign": {
            "post": {
                "description": "Signs a certificate signing request",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CA"
                ],
                "summary": "Signs a certificate signing request",
                "operationId": "SignCSR",
                "parameters": [
                    {
                        "description": "Certificate signing request",
                        "name": "CertificateSigningRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CertificateSigningRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.CertificateSigningResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ValidationError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            }
        },
        "/api/devices": {
            "get": {
                "description": "Lists all devices",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Devices"
                ],
                "summary": "List Devices",
                "operationId": "ListDevices",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Device"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            },
            "post": {
                "description": "Adds a new device",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Devices"
                ],
                "summary": "Add Devices",
                "operationId": "CreateDevice",
                "parameters": [
                    {
                        "description": "Add Device",
                        "name": "Device",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AddDevice"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.Device"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/models.ConflictsError"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            }
        },
        "/api/devices/{id}": {
            "get": {
                "description": "Gets a device by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Devices"
                ],
                "summary": "Get Devices",
                "operationId": "GetDevice",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Device ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Device"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes an existing device and associated IPAM lease",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Devices"
                ],
                "summary": "Delete Device",
                "operationId": "DeleteDevice",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Device ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "$ref": "#/definitions/models.Device"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            },
            "patch": {
                "description": "Updates a device by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Devices"
                ],
                "summary": "Update Devices",
                "operationId": "UpdateDevice",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Device ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Device Update",
                        "name": "update",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdateDevice"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Device"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            }
        },
        "/api/devices/{id}/metadata": {
            "get": {
                "description": "Lists metadata for a device",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Devices"
                ],
                "summary": "List Device Metadata",
                "operationId": "ListDeviceMetadata",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Device ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "greater than revision",
                        "name": "gt_revision",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.DeviceMetadata"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete all metadata for a device",
                "tags": [
                    "Devices"
                ],
                "summary": "Delete all Device metadata",
                "operationId": "DeleteDeviceMetadata",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Device ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            }
        },
        "/api/devices/{id}/metadata/{key}": {
            "get": {
                "description": "Get metadata for a device",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Devices"
                ],
                "summary": "Get Device Metadata",
                "operationId": "GetDeviceMetadataKey",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Device ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Metadata Key",
                        "name": "key",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.DeviceMetadata"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            },
            "put": {
                "description": "Set metadata key for a device",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Devices"
                ],
                "summary": "Set Device Metadata by key",
                "operationId": "UpdateDeviceMetadataKey",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Device ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Metadata Key",
                        "name": "key",
                        "in": "path"
                    },
                    {
                        "description": "Metadata Value",
                        "name": "value",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.DeviceMetadata"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a metadata key for a device",
                "tags": [
                    "Devices"
                ],
                "summary": "Delete a Device metadata key",
                "operationId": "DeleteDeviceMetadataKey",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Device ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Metadata Key",
                        "name": "key",
                        "in": "path"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            }
        },
        "/api/events": {
            "post": {
                "description": "Watches events occurring in the control plane",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Events"
                ],
                "summary": "Watch events occurring in the control plane",
                "operationId": "Watch",
                "parameters": [
                    {
                        "description": "List of events to watch",
                        "name": "Watches",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Watch"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.WatchEvent"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            }
        },
        "/api/fflags": {
            "get": {
                "description": "Lists all feature flags",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "FFlag"
                ],
                "summary": "List Feature Flags",
                "operationId": "ListFeatureFlags",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "boolean"
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            }
        },
        "/api/fflags/{name}": {
            "get": {
                "description": "Gets a Feature Flag by name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "FFlag"
                ],
                "summary": "Get Feature Flag",
                "operationId": "GetFeatureFlag",
                "parameters": [
                    {
                        "type": "string",
                        "description": "feature flag name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "boolean"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            }
        },
        "/api/invitations": {
            "get": {
                "description": "Lists all invitations",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Invitation"
                ],
                "summary": "List Invitations",
                "operationId": "ListInvitations",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Invitation"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            },
            "post": {
                "description": "Create an invitation to an organization",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Invitation"
                ],
                "summary": "Create an invitation",
                "operationId": "CreateInvitation",
                "parameters": [
                    {
                        "description": "Add Invitation",
                        "name": "Invitation",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AddInvitation"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.Invitation"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            }
        },
        "/api/invitations/{id}": {
            "get": {
                "description": "Gets an Invitation by Invitation ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Invitation"
                ],
                "summary": "Get Invitation",
                "operationId": "GetInvitation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Invitation ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Invitation"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes an existing invitation",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Invitation"
                ],
                "summary": "Delete Invitation",
                "operationId": "DeleteInvitation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Invitation ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "$ref": "#/definitions/models.Organization"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            }
        },
        "/api/invitations/{id}/accept": {
            "post": {
                "description": "Accept an invitation to an organization",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Invitation"
                ],
                "summary": "Accept an invitation",
                "operationId": "AcceptInvitation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Invitation ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            }
        },
        "/api/organizations": {
            "get": {
                "description": "Lists all Organizations",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organizations"
                ],
                "summary": "List Organizations",
                "operationId": "ListOrganizations",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Organization"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a named organization with the given CIDR",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organizations"
                ],
                "summary": "Create an Organization",
                "operationId": "CreateOrganization",
                "parameters": [
                    {
                        "description": "Add Organization",
                        "name": "Organization",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AddOrganization"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.Organization"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/models.ConflictsError"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            }
        },
        "/api/organizations/{id}": {
            "get": {
                "description": "Gets a Organization by Organization ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organizations"
                ],
                "summary": "Get Organizations",
                "operationId": "GetOrganizations",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Organization ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Organization"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes an existing organization and associated IPAM prefix",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organizations"
                ],
                "summary": "Delete Organization",
                "operationId": "DeleteOrganization",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Organization ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "$ref": "#/definitions/models.Organization"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            }
        },
        "/api/organizations/{id}/users": {
            "get": {
                "description": "Lists all the users of an organization",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organizations"
                ],
                "summary": "List Organization Users",
                "operationId": "ListOrganizationUsers",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Organization ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.UserOrganization"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            }
        },
        "/api/organizations/{id}/users/{uid}": {
            "get": {
                "description": "Gets a Organization User by Organization ID and User ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organizations"
                ],
                "summary": "Get Organization User",
                "operationId": "GetOrganizationUser",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Organization ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.UserOrganization"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes an existing organization user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organizations"
                ],
                "summary": "Delete a Organization User",
                "operationId": "DeleteOrganizationUser",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Organization ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "$ref": "#/definitions/models.UserOrganization"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ValidationError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            }
        },
        "/api/reg-keys": {
            "get": {
                "description": "Lists all reg keys",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "RegKey"
                ],
                "summary": "List reg keys",
                "operationId": "ListRegKeys",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.RegKey"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a RegKey for a vpc",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "RegKey"
                ],
                "summary": "Create a RegKey",
                "operationId": "CreateRegKey",
                "parameters": [
                    {
                        "description": "Add RegKey",
                        "name": "RegKey",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AddRegKey"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.RegKey"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            }
        },
        "/api/reg-keys/{id}": {
            "get": {
                "description": "Gets a RegKey by RegKey ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "RegKey"
                ],
                "summary": "Get a RegKey",
                "operationId": "GetRegKey",
                "parameters": [
                    {
                        "type": "string",
                        "description": "RegKey ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.RegKey"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes an existing RegKey",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "RegKey"
                ],
                "summary": "Delete RegKey",
                "operationId": "DeleteRegKey",
                "parameters": [
                    {
                        "type": "string",
                        "description": "RegKey ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "$ref": "#/definitions/models.RegKey"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            },
            "patch": {
                "description": "Updates a RegKey by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "RegKey"
                ],
                "summary": "Update RegKey",
                "operationId": "UpdateRegKey",
                "parameters": [
                    {
                        "type": "string",
                        "description": "RegKey ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "RegKey Update",
                        "name": "update",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdateRegKey"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.RegKey"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/models.ValidationError"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            }
        },
        "/api/security-groups": {
            "get": {
                "description": "Lists all Security Groups",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SecurityGroup"
                ],
                "summary": "List Security Groups",
                "operationId": "ListSecurityGroups",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "greater than revision",
                        "name": "gt_revision",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.SecurityGroup"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            },
            "post": {
                "description": "Adds a new Security Group",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SecurityGroup"
                ],
                "summary": "Add SecurityGroup",
                "operationId": "CreateSecurityGroup",
                "parameters": [
                    {
                        "description": "Add SecurityGroup",
                        "name": "SecurityGroup",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AddSecurityGroup"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.SecurityGroup"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/models.ConflictsError"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/models.ValidationError"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            }
        },
        "/api/security-groups/{id}": {
            "get": {
                "description": "Gets a security group by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SecurityGroup"
                ],
                "summary": "Get SecurityGroup",
                "operationId": "GetSecurityGroup",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Security Group ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.SecurityGroup"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes an existing SecurityGroup",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SecurityGroup"
                ],
                "summary": "Delete SecurityGroup",
                "operationId": "DeleteSecurityGroup",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Security Group ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "$ref": "#/definitions/models.SecurityGroup"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            },
            "patch": {
                "description": "Updates a Security Group by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SecurityGroup"
                ],
                "summary": "Update Security Group",
                "operationId": "UpdateSecurityGroup",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Security Group ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Security Group Update",
                        "name": "update",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdateSecurityGroup"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.SecurityGroup"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/models.ValidationError"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            }
        },
        "/api/service-networks": {
            "get": {
                "description": "Lists all ServiceNetworks",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ServiceNetwork"
                ],
                "summary": "List ServiceNetworks",
                "operationId": "ListServiceNetworks",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.ServiceNetwork"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a named serviceNetwork with the given CIDR",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ServiceNetwork"
                ],
                "summary": "Create an ServiceNetwork",
                "operationId": "CreateServiceNetwork",
                "parameters": [
                    {
                        "description": "Add ServiceNetwork",
                        "name": "ServiceNetwork",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AddServiceNetwork"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceNetwork"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/models.ConflictsError"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            }
        },
        "/api/service-networks/{id}": {
            "get": {
                "description": "Gets a ServiceNetwork by ServiceNetwork ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ServiceNetwork"
                ],
                "summary": "Get ServiceNetworks",
                "operationId": "GetServiceNetwork",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ServiceNetwork ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceNetwork"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes an existing serviceNetwork",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ServiceNetwork"
                ],
                "summary": "Delete ServiceNetwork",
                "operationId": "DeleteServiceNetwork",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ServiceNetwork ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceNetwork"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            },
            "patch": {
                "description": "Updates a serviceNetwork by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ServiceNetwork"
                ],
                "summary": "Update ServiceNetworks",
                "operationId": "UpdateServiceNetwork",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ServiceNetwork ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "ServiceNetwork Update",
                        "name": "update",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdateServiceNetwork"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceNetwork"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            }
        },
        "/api/sites": {
            "get": {
                "description": "Lists all sites",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sites"
                ],
                "summary": "List Sites",
                "operationId": "ListSites",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Site"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            },
            "post": {
                "description": "Adds a new site",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sites"
                ],
                "summary": "Add Sites",
                "operationId": "CreateSite",
                "parameters": [
                    {
                        "description": "Add Site",
                        "name": "Site",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AddSite"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.Site"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/models.ConflictsError"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            }
        },
        "/api/sites/{id}": {
            "get": {
                "description": "Gets a site by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sites"
                ],
                "summary": "Get Sites",
                "operationId": "GetSite",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Site ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Site"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes an existing site and associated IPAM lease",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sites"
                ],
                "summary": "Delete Site",
                "operationId": "DeleteSite",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Site ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "$ref": "#/definitions/models.Site"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            },
            "patch": {
                "description": "Updates a site by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sites"
                ],
                "summary": "Update Sites",
                "operationId": "UpdateSite",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Site ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Site Update",
                        "name": "update",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdateSite"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Site"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            }
        },
        "/api/status": {
            "get": {
                "description": "Lists all Statuses",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Statuses"
                ],
                "summary": "List Statuses",
                "operationId": "ListStatuses",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Status"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            },
            "post": {
                "description": "Adds a new status",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Statuses"
                ],
                "summary": "Add Statuses",
                "operationId": "CreateStatus",
                "parameters": [
                    {
                        "description": "Add Status",
                        "name": "Status",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AddStatus"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.Status"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/models.ConflictsError"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes all statuses from the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Statuses"
                ],
                "summary": "Delete All Statuses",
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            }
        },
        "/api/users": {
            "get": {
                "description": "Lists all users",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "List Users",
                "operationId": "ListUsers",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.User"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            }
        },
        "/api/users/{id}": {
            "get": {
                "description": "Gets a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get User",
                "operationId": "GetUser",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Delete User",
                "operationId": "DeleteUser",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.NotAllowedError"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            }
        },
        "/api/users/{id}/organizations/{organization}": {
            "delete": {
                "description": "Deletes an existing organization associated to a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Remove a User from an Organization",
                "operationId": "DeleteUserFromOrganization",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Organization ID",
                        "name": "organization",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            }
        },
        "/api/vpc/{id}/events": {
            "post": {
                "description": "Watches events occurring in the vpc",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "VPC"
                ],
                "summary": "Watch events occurring in the vpc",
                "operationId": "WatchEvents",
                "parameters": [
                    {
                        "type": "string",
                        "description": "connect as the device with the given public key, device will be considered to be online for the duration of this request",
                        "name": "public_key",
                        "in": "query"
                    },
                    {
                        "description": "List of events to watch",
                        "name": "Watches",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Watch"
                            }
                        }
                    },
                    {
                        "type": "string",
                        "description": "VPC ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.WatchEvent"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            }
        },
        "/api/vpcs": {
            "get": {
                "description": "Lists all VPCs",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "VPC"
                ],
                "summary": "List VPCs",
                "operationId": "ListVPCs",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.VPC"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a named vpc with the given CIDR",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "VPC"
                ],
                "summary": "Create an VPC",
                "operationId": "CreateVPC",
                "parameters": [
                    {
                        "description": "Add VPC",
                        "name": "VPC",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AddVPC"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.VPC"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/models.ConflictsError"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            }
        },
        "/api/vpcs/{id}": {
            "get": {
                "description": "Gets a VPC by VPC ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "VPC"
                ],
                "summary": "Get VPCs",
                "operationId": "GetVPC",
                "parameters": [
                    {
                        "type": "string",
                        "description": "VPC ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.VPC"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes an existing vpc and associated IPAM prefix",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "VPC"
                ],
                "summary": "Delete VPC",
                "operationId": "DeleteVPC",
                "parameters": [
                    {
                        "type": "string",
                        "description": "VPC ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "$ref": "#/definitions/models.VPC"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            },
            "patch": {
                "description": "Updates a vpc by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "VPC"
                ],
                "summary": "Update VPCs",
                "operationId": "UpdateVPC",
                "parameters": [
                    {
                        "type": "string",
                        "description": "VPC ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "VPC Update",
                        "name": "update",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdateVPC"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.VPC"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            }
        },
        "/api/vpcs/{id}/devices": {
            "get": {
                "description": "Lists all devices for this VPC",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "VPC"
                ],
                "summary": "List Devices",
                "operationId": "ListDevicesInVPC",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "greater than revision",
                        "name": "gt_revision",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "VPC ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Device"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            }
        },
        "/api/vpcs/{id}/metadata": {
            "get": {
                "description": "Lists metadata for a device",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "VPC"
                ],
                "summary": "List Device Metadata",
                "operationId": "ListMetadataInVPC",
                "parameters": [
                    {
                        "type": "string",
                        "description": "VPC ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "greater than revision",
                        "name": "gt_revision",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "used to filter down to the specified key prefixes",
                        "name": "prefix",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "used to filter down to the specified key",
                        "name": "key",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.DeviceMetadata"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            }
        },
        "/api/vpcs/{id}/security-groups": {
            "get": {
                "description": "Lists all Security Groups in a VPC",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "VPC"
                ],
                "summary": "List Security Groups in a VPC",
                "operationId": "ListSecurityGroupsInVPC",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "greater than revision",
                        "name": "gt_revision",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "VPC ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.SecurityGroup"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            }
        },
        "/check/auth": {
            "get": {
                "description": "Checks if the user is currently authenticated",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Check Authentication",
                "operationId": "CheckAuth",
                "responses": {
                    "200": {
                        "description": "logged_in status will be returned",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "boolean"
                            }
                        }
                    }
                }
            }
        },
        "/device/certs": {
            "get": {
                "description": "gets the jwks that can be used to verify JWTs created by this server.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "gets the jwks",
                "operationId": "Certs",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            }
        },
        "/device/login/start": {
            "post": {
                "description": "Starts a device login request",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Start Login",
                "operationId": "DeviceStart",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.DeviceStartResponse"
                        }
                    }
                }
            }
        },
        "/status/{id}": {
            "get": {
                "description": "Gets statuses based on userd",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "status"
                ],
                "summary": "Get user status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Unique identifier for the status",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Status"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/models.BaseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            }
        },
        "/web/claims": {
            "get": {
                "description": "Retrieves the claims present in the user's access token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Get Access Token Claims",
                "operationId": "Claims",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/web/login/end": {
            "get": {
                "description": "Handles the callback from the OAuth2/OpenID provider and verifies the tokens.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Completes OIDC Web Login",
                "operationId": "WebEnd",
                "parameters": [
                    {
                        "type": "string",
                        "description": "oauth2 code from authorization server",
                        "name": "code",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "state value from the login start request",
                        "name": "state",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "error message if login failed",
                        "name": "error",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "302": {
                        "description": "Redirects to the URLs specified in the login start request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/web/login/start": {
            "get": {
                "description": "Generates state and nonce, then redirects the user to the OAuth2 authorization URL.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Initiates OIDC Web Login",
                "operationId": "WebStart",
                "parameters": [
                    {
                        "type": "string",
                        "description": "URL to redirect to if login succeeds",
                        "name": "redirect",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "URL to redirect to if login fails (optional)",
                        "name": "failure",
                        "in": "query"
                    }
                ],
                "responses": {
                    "302": {
                        "description": "Redirects to the OAuth2 authorization URL",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/web/logout": {
            "get": {
                "description": "Provides the URL to initiate the logout process for the current user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Generate Logout URL",
                "operationId": "Logout",
                "parameters": [
                    {
                        "type": "string",
                        "description": "URL to redirect to after logout",
                        "name": "redirect",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "302": {
                        "description": "Redirects to the OAuth2 logout URL",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/web/refresh": {
            "post": {
                "description": "Obtains and updates a new access token for the user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Refresh Access Token",
                "operationId": "Refresh",
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/web/user_info": {
            "get": {
                "description": "Fetches and returns information for the user who is currently authenticated.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Retrieve Current User Information",
                "operationId": "UserInfo",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.UserInfoResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.AddDevice": {
            "type": "object",
            "properties": {
                "advertise_cidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "172.16.42.0/24"
                    ]
                },
                "endpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Endpoint"
                    }
                },
                "hostname": {
                    "type": "string",
                    "example": "myhost"
                },
                "ipv4_tunnel_ips": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.TunnelIP"
                    }
                },
                "os": {
                    "type": "string"
                },
                "public_key": {
                    "type": "string"
                },
                "relay": {
                    "type": "boolean"
                },
                "security_group_id": {
                    "type": "string"
                },
                "symmetric_nat": {
                    "type": "boolean"
                },
                "vpc_id": {
                    "type": "string",
                    "example": "694aa002-5d19-495e-980b-3d8fd508ea10"
                }
            }
        },
        "models.AddInvitation": {
            "type": "object",
            "properties": {
                "email": {
                    "description": "The email address of the user to invite (one of email or user_id is required)",
                    "type": "string"
                },
                "organization_id": {
                    "type": "string"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "user_id": {
                    "description": "The user id to invite (one of email or user_id is required)",
                    "type": "string"
                }
            }
        },
        "models.AddOrganization": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "example": "The Red Zone"
                },
                "name": {
                    "type": "string",
                    "example": "zone-red"
                }
            }
        },
        "models.AddRegKey": {
            "type": "object",
            "properties": {
                "description": {
                    "description": "Description of the registration key.",
                    "type": "string"
                },
                "expires_at": {
                    "description": "ExpiresAt is optional, if set the registration key is only valid until the ExpiresAt time.",
                    "type": "string"
                },
                "security_group_id": {
                    "description": "SecurityGroupId is the ID of the security group to assign to the device.",
                    "type": "string"
                },
                "service_network_id": {
                    "description": "ServiceNetworkID is the ID of the Service Network the device can join.",
                    "type": "string"
                },
                "settings": {
                    "description": "Settings contains general settings for the device.",
                    "type": "object",
                    "additionalProperties": true
                },
                "single_use": {
                    "description": "SingleUse only allows the registration key to be used once.",
                    "type": "boolean"
                },
                "vpc_id": {
                    "description": "VpcID is the ID of the VPC the device will join.",
                    "type": "string"
                }
            }
        },
        "models.AddSecurityGroup": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "example": "group_description"
                },
                "inbound_rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.SecurityRule"
                    }
                },
                "outbound_rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.SecurityRule"
                    }
                },
                "vpc_id": {
                    "type": "string"
                }
            }
        },
        "models.AddServiceNetwork": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "example": "The Red Zone"
                },
                "organization_id": {
                    "type": "string"
                }
            }
        },
        "models.AddSite": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "platform": {
                    "type": "string"
                },
                "public_key": {
                    "type": "string"
                },
                "service_network_id": {
                    "type": "string",
                    "example": "694aa002-5d19-495e-980b-3d8fd508ea10"
                }
            }
        },
        "models.AddStatus": {
            "type": "object",
            "properties": {
                "hostname": {
                    "type": "string"
                },
                "is_reachable": {
                    "type": "boolean"
                },
                "latency": {
                    "type": "string"
                },
                "method": {
                    "type": "string"
                },
                "wg_ip": {
                    "type": "string"
                }
            }
        },
        "models.AddVPC": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "example": "The Red Zone"
                },
                "ipv4_cidr": {
                    "type": "string",
                    "example": "172.16.42.0/24"
                },
                "ipv6_cidr": {
                    "type": "string",
                    "example": "0200::/8"
                },
                "organization_id": {
                    "type": "string"
                },
                "private_cidr": {
                    "type": "boolean"
                }
            }
        },
        "models.BaseError": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "something bad"
                }
            }
        },
        "models.CertificateSigningRequest": {
            "type": "object",
            "properties": {
                "duration": {
                    "description": "Requested 'duration' (i.e. lifetime) of the Certificate. Note that the\nissuer may choose to ignore the requested duration, just like any other\nrequested attribute.\n+optional",
                    "type": "string"
                },
                "is_ca": {
                    "description": "Requested basic constraints isCA value. Note that the issuer may choose\nto ignore the requested isCA value, just like any other requested attribute.\n\nNOTE: If the CSR in the `Request` field has a BasicConstraints extension,\nit must have the same isCA value as specified here.\n\nIf true, this will automatically add the `cert sign` usage to the list\nof requested `usages`.\n+optional",
                    "type": "boolean"
                },
                "request": {
                    "description": "The PEM-encoded X.509 certificate signing request to be submitted to the\nissuer for signing.\n\nIf the CSR has a BasicConstraints extension, its isCA attribute must\nmatch the `isCA` value of this CertificateRequest.\nIf the CSR has a KeyUsage extension, its key usages must match the\nkey usages in the `usages` field of this CertificateRequest.\nIf the CSR has a ExtKeyUsage extension, its extended key usages\nmust match the extended key usages in the `usages` field of this\nCertificateRequest.",
                    "type": "string",
                    "example": "-----BEGIN CERTIFICATE REQUEST-----(...)-----END CERTIFICATE REQUEST-----"
                },
                "usages": {
                    "description": "Requested key usages and extended key usages.\n\nNOTE: If the CSR in the `Request` field has uses the KeyUsage or\nExtKeyUsage extension, these extensions must have the same values\nas specified here without any additional values.\n\nIf unset, defaults to `digital signature` and `key encipherment`.\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.KeyUsage"
                    }
                }
            }
        },
        "models.CertificateSigningResponse": {
            "type": "object",
            "properties": {
                "ca": {
                    "description": "The PEM encoded X.509 certificate of the signer, also known as the CA\n(Certificate Authority).\nThis is set on a best-effort basis by different issuers.\nIf not set, the CA is assumed to be unknown/not available.\n+optional",
                    "type": "string",
                    "example": "-----BEGIN CERTIFICATE-----(...)-----END CERTIFICATE-----"
                },
                "certificate": {
                    "description": "The PEM encoded X.509 certificate resulting from the certificate\nsigning request.\nIf not set, the CertificateRequest has either not been completed or has\nfailed. More information on failure can be found by checking the\n`conditions` field.\n+optional",
                    "type": "string",
                    "example": "-----BEGIN CERTIFICATE-----(...)-----END CERTIFICATE-----"
                }
            }
        },
        "models.ConflictsError": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "something bad"
                },
                "id": {
                    "type": "string",
                    "example": "a1fae5de-dd96-4b20-8362-95f6a574c4b1"
                }
            }
        },
        "models.Device": {
            "type": "object",
            "properties": {
                "advertise_cidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "allowed_ips": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "bearer_token": {
                    "description": "the token nexd should use to reconcile device state.",
                    "type": "string"
                },
                "endpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Endpoint"
                    }
                },
                "hostname": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "example": "aa22666c-0f57-45cb-a449-16efecc04f2e"
                },
                "ipv4_tunnel_ips": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.TunnelIP"
                    }
                },
                "ipv6_tunnel_ips": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.TunnelIP"
                    }
                },
                "online": {
                    "type": "boolean"
                },
                "online_at": {
                    "type": "string"
                },
                "os": {
                    "type": "string"
                },
                "owner_id": {
                    "type": "string"
                },
                "public_key": {
                    "type": "string"
                },
                "relay": {
                    "type": "boolean"
                },
                "revision": {
                    "type": "integer"
                },
                "security_group_id": {
                    "type": "string"
                },
                "symmetric_nat": {
                    "type": "boolean"
                },
                "vpc_id": {
                    "type": "string",
                    "example": "694aa002-5d19-495e-980b-3d8fd508ea10"
                }
            }
        },
        "models.DeviceMetadata": {
            "type": "object",
            "properties": {
                "device_id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "revision": {
                    "type": "integer"
                },
                "value": {}
            }
        },
        "models.DeviceStartResponse": {
            "type": "object",
            "properties": {
                "client_id": {
                    "type": "string"
                },
                "device_authorization_endpoint": {
                    "description": "TODO: Remove this once golang/oauth2 supports device flow\nand when coreos/go-oidc adds device_authorization_endpoint discovery",
                    "type": "string"
                },
                "issuer": {
                    "type": "string"
                },
                "server_time": {
                    "description": "the current time on the server, can be used by a client to get an idea of what the time skew is\nin relation to the server.",
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "models.Endpoint": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "IP address and port of the endpoint.",
                    "type": "string",
                    "example": "10.1.1.1:51820"
                },
                "source": {
                    "description": "How the endpoint was discovered",
                    "type": "string"
                }
            }
        },
        "models.InternalServerError": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "something bad"
                },
                "trace_id": {
                    "type": "string"
                }
            }
        },
        "models.Invitation": {
            "type": "object",
            "properties": {
                "email": {
                    "description": "The email address to invite",
                    "type": "string"
                },
                "expires_at": {
                    "type": "string"
                },
                "from": {
                    "$ref": "#/definitions/models.User"
                },
                "id": {
                    "type": "string",
                    "example": "aa22666c-0f57-45cb-a449-16efecc04f2e"
                },
                "organization": {
                    "$ref": "#/definitions/models.Organization"
                },
                "organization_id": {
                    "type": "string"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "models.KeyUsage": {
            "type": "string",
            "enum": [
                "signing",
                "digital signature",
                "content commitment",
                "key encipherment",
                "key agreement",
                "data encipherment",
                "cert sign",
                "crl sign",
                "encipher only",
                "decipher only",
                "any",
                "server auth",
                "client auth",
                "code signing",
                "email protection",
                "s/mime",
                "ipsec end system",
                "ipsec tunnel",
                "ipsec user",
                "timestamping",
                "ocsp signing",
                "microsoft sgc",
                "netscape sgc"
            ],
            "x-enum-varnames": [
                "UsageSigning",
                "UsageDigitalSignature",
                "UsageContentCommitment",
                "UsageKeyEncipherment",
                "UsageKeyAgreement",
                "UsageDataEncipherment",
                "UsageCertSign",
                "UsageCRLSign",
                "UsageEncipherOnly",
                "UsageDecipherOnly",
                "UsageAny",
                "UsageServerAuth",
                "UsageClientAuth",
                "UsageCodeSigning",
                "UsageEmailProtection",
                "UsageSMIME",
                "UsageIPsecEndSystem",
                "UsageIPsecTunnel",
                "UsageIPsecUser",
                "UsageTimestamping",
                "UsageOCSPSigning",
                "UsageMicrosoftSGC",
                "UsageNetscapeSGC"
            ]
        },
        "models.NotAllowedError": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "something bad"
                },
                "reason": {
                    "type": "string"
                }
            }
        },
        "models.Organization": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "example": "Team A"
                },
                "id": {
                    "type": "string",
                    "example": "aa22666c-0f57-45cb-a449-16efecc04f2e"
                },
                "name": {
                    "type": "string",
                    "example": "zone-red"
                }
            }
        },
        "models.RegKey": {
            "type": "object",
            "properties": {
                "bearer_token": {
                    "description": "BearerToken is the bearer token the client should use to authenticate the device registration request.",
                    "type": "string"
                },
                "description": {
                    "description": "Description of the registration key.",
                    "type": "string"
                },
                "device_id": {
                    "description": "DeviceId is set if the RegKey was created for single use",
                    "type": "string"
                },
                "expires_at": {
                    "description": "ExpiresAt is optional, if set the registration key is only valid until the ExpiresAt time.",
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "example": "aa22666c-0f57-45cb-a449-16efecc04f2e"
                },
                "owner_id": {
                    "description": "OwnerID is the ID of the user that created the registration key.",
                    "type": "string"
                },
                "security_group_id": {
                    "description": "SecurityGroupId is the ID of the security group to assign to the device.",
                    "type": "string"
                },
                "service_network_id": {
                    "description": "ServiceNetworkID is the ID of the Service Network the device can join.",
                    "type": "string"
                },
                "settings": {
                    "description": "Settings contains general settings for the device.",
                    "type": "object",
                    "additionalProperties": true
                },
                "vpc_id": {
                    "description": "VpcID is the ID of the VPC the device can join.",
                    "type": "string"
                }
            }
        },
        "models.SecurityGroup": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "example": "aa22666c-0f57-45cb-a449-16efecc04f2e"
                },
                "inbound_rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.SecurityRule"
                    }
                },
                "outbound_rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.SecurityRule"
                    }
                },
                "revision": {
                    "type": "integer"
                },
                "vpc_id": {
                    "type": "string"
                }
            }
        },
        "models.SecurityRule": {
            "type": "object",
            "properties": {
                "from_port": {
                    "type": "integer"
                },
                "ip_protocol": {
                    "type": "string"
                },
                "ip_ranges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "to_port": {
                    "type": "integer"
                }
            }
        },
        "models.ServiceNetwork": {
            "type": "object",
            "properties": {
                "ca_certificates": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "example": "aa22666c-0f57-45cb-a449-16efecc04f2e"
                },
                "organization_id": {
                    "type": "string"
                },
                "revision": {
                    "type": "integer"
                }
            }
        },
        "models.Site": {
            "type": "object",
            "properties": {
                "bearer_token": {
                    "description": "the token nexd should use to reconcile Site state.",
                    "type": "string"
                },
                "hostname": {
                    "type": "string",
                    "example": "myhost"
                },
                "id": {
                    "type": "string",
                    "example": "aa22666c-0f57-45cb-a449-16efecc04f2e"
                },
                "link_secret": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "online": {
                    "type": "boolean"
                },
                "online_at": {
                    "type": "string"
                },
                "os": {
                    "type": "string"
                },
                "owner_id": {
                    "type": "string"
                },
                "platform": {
                    "type": "string"
                },
                "public_key": {
                    "type": "string"
                },
                "revision": {
                    "type": "integer"
                },
                "service_network_id": {
                    "type": "string",
                    "example": "694aa002-5d19-495e-980b-3d8fd508ea10"
                }
            }
        },
        "models.Status": {
            "type": "object",
            "properties": {
                "hostname": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "example": "aa22666c-0f57-45cb-a449-16efecc04f2e"
                },
                "is_reachable": {
                    "type": "boolean"
                },
                "latency": {
                    "type": "string"
                },
                "method": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                },
                "wg_ip": {
                    "type": "string"
                }
            }
        },
        "models.TunnelIP": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "IP address and port of the endpoint.",
                    "type": "string",
                    "example": "10.1.1.1:51820"
                },
                "cidr": {
                    "description": "VPC CIDR this address was allocated from",
                    "type": "string",
                    "example": "10.0.0.0/24"
                }
            }
        },
        "models.UpdateDevice": {
            "type": "object",
            "properties": {
                "advertise_cidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "172.16.42.0/24"
                    ]
                },
                "endpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Endpoint"
                    }
                },
                "hostname": {
                    "type": "string",
                    "example": "myhost"
                },
                "relay": {
                    "type": "boolean"
                },
                "revision": {
                    "type": "integer"
                },
                "security_group_id": {
                    "type": "string"
                },
                "symmetric_nat": {
                    "type": "boolean"
                },
                "vpc_id": {
                    "type": "string",
                    "example": "694aa002-5d19-495e-980b-3d8fd508ea10"
                }
            }
        },
        "models.UpdateRegKey": {
            "type": "object",
            "properties": {
                "description": {
                    "description": "Description of the registration key.",
                    "type": "string"
                },
                "expires_at": {
                    "description": "ExpiresAt is optional, if set the registration key is only valid until the ExpiresAt time.",
                    "type": "string"
                },
                "security_group_id": {
                    "description": "SecurityGroupId is the ID of the security group to assign to the device.",
                    "type": "string"
                },
                "settings": {
                    "description": "Settings contains general settings for the device.",
                    "type": "object",
                    "additionalProperties": true
                }
            }
        },
        "models.UpdateSecurityGroup": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "inbound_rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.SecurityRule"
                    }
                },
                "outbound_rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.SecurityRule"
                    }
                }
            }
        },
        "models.UpdateServiceNetwork": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "example": "The Red Zone"
                }
            }
        },
        "models.UpdateSite": {
            "type": "object",
            "properties": {
                "hostname": {
                    "type": "string",
                    "example": "myhost"
                },
                "link_secret": {
                    "type": "string"
                },
                "os": {
                    "type": "string"
                },
                "revision": {
                    "type": "integer"
                }
            }
        },
        "models.UpdateVPC": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "example": "The Red Zone"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "full_name": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "example": "aa22666c-0f57-45cb-a449-16efecc04f2e"
                },
                "picture": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "models.UserInfoResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "email_verified": {
                    "type": "boolean"
                },
                "family_name": {
                    "type": "string"
                },
                "given_name": {
                    "type": "string"
                },
                "picture": {
                    "type": "string"
                },
                "preferred_username": {
                    "type": "string"
                },
                "sub": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "integer"
                }
            }
        },
        "models.UserOrganization": {
            "type": "object",
            "properties": {
                "organization_id": {
                    "type": "string"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "user": {
                    "$ref": "#/definitions/models.User"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "models.VPC": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "example": "aa22666c-0f57-45cb-a449-16efecc04f2e"
                },
                "ipv4_cidr": {
                    "type": "string"
                },
                "ipv6_cidr": {
                    "type": "string"
                },
                "organization_id": {
                    "type": "string"
                },
                "private_cidr": {
                    "type": "boolean"
                },
                "revision": {
                    "type": "integer"
                }
            }
        },
        "models.ValidationError": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "something bad"
                },
                "field": {
                    "type": "string"
                },
                "reason": {
                    "type": "string"
                }
            }
        },
        "models.Watch": {
            "type": "object",
            "properties": {
                "at_tail": {
                    "type": "boolean"
                },
                "gt_revision": {
                    "type": "integer"
                },
                "kind": {
                    "type": "string"
                },
                "options": {
                    "type": "object",
                    "additionalProperties": true
                }
            }
        },
        "models.WatchEvent": {
            "type": "object",
            "properties": {
                "kind": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {}
            }
        }
    },
    "securityDefinitions": {
        "OAuth2Implicit": {
            "type": "oauth2",
            "flow": "implicit",
            "authorizationUrl": "https://auth.try.nexodus.127.0.0.1.nip.io/",
            "scopes": {
                "admin": " Grants read and write access to administrative information",
                "user": " Grants read and write access to resources owned by this user"
            }
        }
    },
    "tags": [
        {
            "description": "X509 Certificate related APIs, these APIs are experimental and disabled by default.  Use the feature flag apis to check if they are enabled on the server.",
            "name": "CA"
        },
        {
            "description": "Skupper Site related APIs, these APIs are experimental and disabled by default.  Use the feature flag apis to check if they are enabled on the server.",
            "name": "Sites"
        }
    ]
}