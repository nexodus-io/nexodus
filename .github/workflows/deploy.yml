name: deploy

concurrency: qa-${{ github.ref_name }}

on:
  push:
    branches: [main]

env:
  REGISTRY: quay.io
  REPOSITORY: apex
  APISERVER_IMAGE_NAME: apiserver
  FRONTEND_IMAGE_NAME: frontend
  IPAM_IMAGE_NAME: ipam

jobs:
  build-images:
    name: Build Images
    runs-on: ubuntu-latest
    environment: image-repositories
    steps:
      - uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Quay.io
        uses: redhat-actions/podman-login@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.QUAY_ROBOT_USERNAME }}
          password: ${{ secrets.QUAY_ROBOT_PASSWORD }}

      - name: Build and export apiserver
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          file: ./Containerfile.apiserver
          tags: |
            quay.io/apex/apiserver:latest
            quay.io/apex/apiserver:${{ github.sha }}
            quay.io/apex/apiserver:${{ github.ref_name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and export frontend
        id: build-frontend
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          file: ./Containerfile.frontend
          tags: |
            quay.io/apex/frontend:latest
            quay.io/apex/frontend:${{ github.sha }}
            quay.io/apex/frontend:${{ github.ref_name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and export apex
        id: build-apex
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          file: ./Containerfile.apex
          tags: |
            quay.io/apex/apex:latest
            quay.io/apex/apex:${{ github.sha }}
            quay.io/apex/apex:${{ github.ref_name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and export ipam
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          file: ./Containerfile.ipam
          tags: |
            quay.io/apex/go-ipam:latest
            quay.io/apex/go-ipam:${{ github.sha }}
            quay.io/apex/go-ipam:${{ github.ref_name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  update-deployment:
    name: Update Deployment
    needs: ["build-images"]
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v3

      - name: Calculate Short SHA
        id: gitsha
        run: |
          echo "short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Set up Kustomize
        run: |
          mkdir -p $HOME/.local/bin
          pushd $HOME/.local/bin
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash -s 4.5.7
          popd
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Update QA Images
        run: |
          pushd ./deploy/apex/overlays/qa
          kustomize edit set image ${REGISTRY}/${REPOSITORY}/${APISERVER_IMAGE_NAME}:${GITHUB_SHA}
          kustomize edit set image ${REGISTRY}/${REPOSITORY}/${FRONTEND_IMAGE_NAME}:${GITHUB_SHA}
          kustomize edit set image ${REGISTRY}/${REPOSITORY}/${IPAM_IMAGE_NAME}:${GITHUB_SHA}
          yq -i kustomization.yaml
          popd

      - name: Check for changes
        run: |
          git diff --quiet || echo "COMMIT_CHANGES=1" >> $GITHUB_ENV

      - name: Check for new commits in main
        run: |
          git fetch origin
          if [ "$(git log HEAD..origin/main --oneline | wc -l)" != "0" ]; then echo "COMMIT_CHANGES=0"; fi >> $GITHUB_ENV

      - name: Commit Changes
        id: commit
        if: env.COMMIT_CHANGES == 1
        uses: devops-infra/action-commit-push@master
        with:
          github_token: "${{ secrets.GITHUB_TOKEN }}"
          commit_prefix: "[deploy] "
          commit_message: "Update qa images to ${{ steps.gitsha.outputs.short }}"

  publish-rpms:
    runs-on: ubuntu-latest
    environment: copr-repo
    strategy:
      matrix:
        include:
          - mock_root: fedora-37-x86_64
            srpm_distro: fc37
          - mock_root: fedora-38-x86_64
            srpm_distro: fc38
    steps:
      - uses: actions/checkout@v3

      # Needed for building binaries to generate manpages
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19

      - id: go-cache-paths
        shell: bash
        run: |
          echo "go-build=$(go env GOCACHE)" >> $GITHUB_OUTPUT
          echo "go-mod=$(go env GOMODCACHE)" >> $GITHUB_OUTPUT

      - name: Go Build Cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.go-cache-paths.outputs.go-build }}
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}

      - name: Go Mod Cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}

      - name: Install make
        run: |
          sudo apt -y install make
      - name: Build srpm
        run: |
          MOCK_ROOT="${{ matrix.mock_root }}" make srpm
          find dist
      - name: Submit srpm to copr
        run: |
          echo "${{ secrets.COPR_CONFIG }}" > ~/.config/copr
          docker run --name copr-cli -v $(pwd):/apex -v ~/.config:/root/.config quay.io/apex/mock:latest \
              copr-cli build apex -r ${{ matrix.mock_root }} --nowait /apex//dist/rpm/mock/apex-0-0.1.$(date +%Y%m%d)git$(git describe --always).${{ matrix.srpm_distro }}.src.rpm