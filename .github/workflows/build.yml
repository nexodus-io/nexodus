name: build

on:
  push:
    branches: ["main"]
    paths-ignore:
      - '**/*.md'
      - '**/*.gitignore'
  pull_request:
    branches: ["main"]
    paths-ignore:
      - '**/*.md'
      - '**/*.gitignore'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19

      - id: go-cache-paths
        shell: bash
        run: |
          echo "go-build=$(go env GOCACHE)" >> $GITHUB_OUTPUT
          echo "go-mod=$(go env GOMODCACHE)" >> $GITHUB_OUTPUT

      - name: Go Build Cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.go-cache-paths.outputs.go-build }}
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}

      - name: Go Mod Cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}

      - name: Go Format
        run: |
          go fmt ./...

      - name: Build
        run: |
          go build ./...

      - name: Unit tests
        run: |
          go test -v ./...

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.50.0

  ui-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - run: npm ci
        working-directory: ui
      - run: npx prettier --check .
        working-directory: ui
      - run: npm run build
        working-directory: ui

  k8s-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: YAML Lint
        run: |
          yamllint -c .yamllint.yaml deploy --strict

      - uses: actions/setup-go@v3
        with:
          go-version: "stable"

      - name: Set up Kustomize
        run: |
          mkdir -p $HOME/.local/bin
          pushd $HOME/.local/bin
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash -s 4.5.7
          popd
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Kustomize Build
        run: |
          mkdir -p kubeconfigs
          kustomize build ./deploy/apex/overlays/dev > kubeconfigs/dev.yaml
          kustomize build ./deploy/apex/overlays/prod > kubeconfigs/prod.yaml

      - name: Login to GHCR
        run: echo "${{ github.token }}" | docker login https://ghcr.io -u ${GITHUB_ACTOR} --password-stdin

      - name: Set Up Kubeconform
        run: go install github.com/yannh/kubeconform/cmd/kubeconform@v0.5.0

      - name: Check Kube Manifests
        run: |
          kubeconform -summary -output json -schema-location default -schema-location 'https://raw.githubusercontent.com/datreeio/CRDs-catalog/main/{{.Group}}/{{.ResourceKind}}_{{.ResourceAPIVersion}}.json' -schema-location 'deploy/.crdSchemas/{{.ResourceKind}}_{{.ResourceAPIVersion}}.json' kubeconfigs/

  build-images:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2
      - name: Build and export apiserver
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Containerfile.apiserver
          tags: quay.io/apex/apiserver:latest
          outputs: type=docker,dest=/tmp/apiserver.tar
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Upload apiserver artifact
        uses: actions/upload-artifact@v3
        with:
          name: apiserver
          path: /tmp/apiserver.tar
      - name: Build and export frontend
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Containerfile.frontend
          tags: quay.io/apex/frontend:latest
          outputs: type=docker,dest=/tmp/frontend.tar
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Upload frontend artifact
        uses: actions/upload-artifact@v3
        with:
          name: frontend
          path: /tmp/frontend.tar

  build-binaries:
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "macos-latest", "windows-latest"]
        arch: ["amd64", "arm64", "arm"]
        exclude:
          - os: macos-latest
            arch: arm
          - os: windows-latest
            arch: arm
          - os: windows-latest
            arch: arm64
    runs-on: ${{ matrix.os }}
    env:
      GOARCH: ${{ matrix.arch }}
      JOB_NAME: "apex-${{ matrix.os }}-${{ matrix.arch }}"
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19

      - id: go-cache-paths
        shell: bash
        run: |
          echo "go-build=$(go env GOCACHE)" >> $GITHUB_OUTPUT
          echo "go-mod=$(go env GOMODCACHE)" >> $GITHUB_OUTPUT

      - name: Go Build Cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.go-cache-paths.outputs.go-build }}
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}

      - name: Go Mod Cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}

      - name: Test
        run: |
          go test -v ./internal/apex/...

      - name: Build Apexd
        id: build-apexd
        run: |
          CGO_ENABLED=0 go build -o apexd-$(go env GOOS)-$(go env GOARCH) -v ./cmd/apexd
          echo "artifact-name=apexd-$(go env GOOS)-$(go env GOARCH)" >> $GITHUB_OUTPUT
        shell: bash

      - name: Build Apexctl
        id: build-apexctl
        run: |
          CGO_ENABLED=0 go build -o apexctl-$(go env GOOS)-$(go env GOARCH) -v ./cmd/apexctl
          echo "artifact-name=apexctl-$(go env GOOS)-$(go env GOARCH)" >> $GITHUB_OUTPUT
        shell: bash

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: apex
          path: |
            ${{ steps.build-apexd.outputs.artifact-name }}
            ${{ steps.build-apexctl.outputs.artifact-name }}

  e2e:
    needs: [lint, k8s-lint, build-images]
    name: e2e-integration
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v2
      - uses: docker/setup-buildx-action@v2
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19

      - id: go-cache-paths
        shell: bash
        run: |
          echo "go-build=$(go env GOCACHE)" >> $GITHUB_OUTPUT
          echo "go-mod=$(go env GOMODCACHE)" >> $GITHUB_OUTPUT

      - name: Go Build Cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.go-cache-paths.outputs.go-build }}
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}

      - name: Go Mod Cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}

      - name: Install deps
        run: |
          sudo apt-get -qy install libnss3-tools

      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - name: Install mkcert
        run: |
          brew install mkcert

      - name: Add hosts to /etc/hosts
        run: |
          echo "127.0.0.1 auth.apex.local api.apex.local apex.local" | sudo tee -a /etc/hosts

      - name: Download apiserver image
        uses: actions/download-artifact@v3
        with:
          name: apiserver
          path: /tmp

      - name: Download frontend image
        uses: actions/download-artifact@v3
        with:
          name: frontend
          path: /tmp

      - name: Load Docker images
        run: |
          docker load --input /tmp/apiserver.tar
          docker load --input /tmp/frontend.tar

      - name: Build dist
        run: |
          make dist/apexd dist/apexctl

      - name: Setup KIND
        run: |
          make run-on-kind

      - name: Build ubuntu test image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Containerfile.test
          target: ubuntu
          tags: quay.io/apex/test:ubuntu
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run e2e
        run: |
          go test -v --tags=integration ./integration-tests/...

      - name: Get Logs
        if: always()
        run: |
          kubectl logs -n apex -l app.kubernetes.io/part-of=apex --all-containers=true > logs.txt

      - name: Upload Logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: e2e-logs
          path: logs.txt

  upload-s3-binaries:
    needs: ["build-binaries", "e2e"]
    permissions:
      id-token: write
      contents: read
    runs-on: ubuntu-latest
    environment: image-repositories
    if: github.ref == 'refs/heads/main'
    steps:
      - name: download binary artifacts
        uses: actions/download-artifact@v3
        with:
          name: apex
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          role-session-name: apex-ci-deploy
          aws-region: us-east-1
      - name: copy binaries to s3
        run: |
          aws s3 sync . s3://apex-net/
