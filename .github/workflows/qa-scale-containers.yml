# qa-scale workflow is for scale testing against the Nexodus qa deployment
name: qa-scale-containers

concurrency:
  group: qa-scale-containers

on:
  workflow_dispatch:
    inputs:
      deployment_size:
        description: 'deployment size: small | medium | large | xlarge'
        required: true
        default: 'small'
        type: string

      num_containers:
        description: 'containers per node (default 5):'
        required: true
        default: '5'

      aws_instance_type:
        description: 'ec2 instance type (default t2.micro): t2.micro | t2.small | t2.medium | t2.large'
        required: true
        default: 't2.micro'
        type: string

      pr_or_branch:
        description: 'pull request number or branch name (default main)'
        required: true
        default: 'main'

      debug_pause:
        description: 'time in minutes to pause before tearing down the infra for debugging'
        required: false
        default: '0'

      timeout_minutes:
        description: 'timeout in minutes for the deploy-qa job'
        required: false
        default: '90'

jobs:
  deploy-qa:
    name: deploy-qa-ec2
    runs-on: ubuntu-latest
    environment: image-repositories
    timeout-minutes: ${{ fromJSON(github.event.inputs.timeout_minutes) }}
    env:
      AWS_REGION: "us-east-1"
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      ANSIBLE_VAULT_PASSWORD_FILE: "vault-secret.txt"
      ANSIBLE_PRIVATE_KEY_FILE: "nexodus.pem"
      ANSIBLE_HOST_KEY_CHECKING: "false"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Determine if pr_or_branch is a PR number
        id: check_pr
        run: |
          if [[ "${{ github.event.inputs.pr_or_branch }}" =~ ^[0-9]+$ ]]; then
            echo "is_pr=true" >> "$GITHUB_OUTPUT"
          else
            echo "is_pr=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Fetch and checkout PR
        if: steps.check_pr.outputs.is_pr == 'true'
        run: |
          git fetch origin pull/${{ github.event.inputs.pr_or_branch }}/head:pr-${{ github.event.inputs.pr_or_branch }}
          git checkout pr-${{ github.event.inputs.pr_or_branch }}

      - name: Checkout branch
        if: steps.check_pr.outputs.is_pr == 'false'
        run: git checkout ${{ github.event.inputs.pr_or_branch }}

      - name: Login to Quay.io
        uses: redhat-actions/podman-login@v1
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_ROBOT_USERNAME }}
          password: ${{ secrets.QUAY_ROBOT_PASSWORD }}

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Containerfile.nexd
          push: true
          tags: quay.io/nexodus/nexd-qa:latest

      - name: Setup Go
        uses: ./.github/actions/setup-go-env

      - name: Build
        run: |
          make dist/nexd-linux-amd64
          make dist/nexctl-linux-amd64

      - name:  Copy Binaries to S3
        run: |
          aws s3 cp ./dist/nexd-linux-amd64 s3://nexodus-io/ec2-e2e/qa/
          aws s3 cp ./dist/nexctl-linux-amd64 s3://nexodus-io/ec2-e2e/qa/

      - name:  Build Keycloak Tool
        run: |
          go build -o ./ ./hack/e2e-scripts/kctool/

      - name: Create a Keycloak User
        id: kc-user
        run: |
          output=$(./kctool --create-user \
            -ku "${{ secrets.KC_QA_USERNAME }}" \
            -kp "${{ secrets.KC_QA_PASSWORD }}" \
            -u qa \
            -p "${{ secrets.QA_USER_PASSWORD }}" \
            https://auth.qa.nexodus.io)
          echo "USER=$output" >> "$GITHUB_OUTPUT"

      - name: User results from Keycloak
        run: echo "User is ${{ steps.kc-user.outputs.USER }}"

      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Ansible and Dependencies
        run: pip3.10 install boto boto3 ansible-vault ansible-core==2.13.3

      - name: Install amazon.aws Ansible library
        run: ansible-galaxy collection install amazon.aws

      - name: Set Deployment Size to Small
        if: github.event.inputs.deployment_size == 'small'
        run: |
          echo "${{ secrets.ANSIBLE_QA_SMALL_CONTAINERS }}" > ./ops/ansible/aws/vars.yml

      - name: Set Deployment Size to Medium
        if: github.event.inputs.deployment_size == 'medium'
        run: |
          echo "${{ secrets.ANSIBLE_VARS_MEDIUM_QA }}" > ./ops/ansible/aws/vars.yml

      - name: Set Deployment Size to Large
        if: github.event.inputs.deployment_size == 'large'
        run: |
          echo "${{ secrets.ANSIBLE_VARS_LARGE_QA }}" > ./ops/ansible/aws/vars.yml

      - name: Set Deployment Size to XLarge
        if: github.event.inputs.deployment_size == 'xlarge'
        run: |
          echo "${{ secrets.ANSIBLE_VARS_XLARGE_QA }}" > ./ops/ansible/aws/vars.yml

      - name: Create Ansible Secrets
        run: |
          echo "${{ secrets.ANSIBLE_SSH_KEY }}" > nexodus.pem
          chmod 0400 nexodus.pem
          echo "${{ secrets.ANSIBLE_VAULT_PASSWORD }}" > vault-secret.txt
          chmod 0400 vault-secret.txt

      - name: Deploy EC2 Agent Nodes
        run: |
          ansible-playbook -vv ./ops/ansible/aws/deploy-ec2-qa-containers.yml \
          -i ./ops/ansible/aws/inventory.txt \
          --private-key nexodus.pem \
          --vault-password-file vault-secret.txt \
          --extra-vars "nexodus_auth_uid=${{ steps.kc-user.outputs.USER }}" \
          --extra-vars "nexodus_auth_password=${{ secrets.QA_USER_PASSWORD }}" \
          --extra-vars "debug_pause=${{ github.event.inputs.debug_pause }}" \
          --extra-vars "num_containers=${{ github.event.inputs.num_containers }}" \
          --extra-vars "aws_instance_type=${{ github.event.inputs.aws_instance_type }}" \
          --extra-vars "aws_nodetype_tag=nexodus-qa-containers"

      - name: Mesh Connectivity Results
        run: |
          set -e
          cat ./ops/ansible/aws/connectivity-results.txt
          if grep -iq 'Unreachable' ./ops/ansible/aws/connectivity-results.txt || grep -iq 'Failed' ./ops/ansible/aws/connectivity-results.txt; then
            echo "Connectivity results contain 'Unreachable or Failed' nodes, check the connectivity results and artifacts for details. Failing the job"
            exit 1
          else
            echo "Connectivity results do not contain any 'Unreachable' nodes"
          fi

      - name: Terminate EC2 Instances
        if: always()
        run: |
          ansible-playbook -vv ./ops/ansible/aws/terminate-instances.yml \
          --extra-vars "aws_nodetype_tag=nexodus-qa-containers"

      - name: Upload nexd and api-server Logs to Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dev-ec2-artifacts
          path: ./ops/ansible/aws/nexd-logs/
          retention-days: 10
