# The administration endpoint uses a Unix socket instead of TCP in order
# to avoid exposing it outside of the pod. Requests for metrics and
# probes will go via an HTTP listener that only accepts requests for the
# /metrics and /ready paths.
admin:
  access_log_path: /dev/null
  address:
    pipe:
      path: /sockets/admin.socket

static_resources:

  clusters:

    # This backend is used to send metrics and probes requests to the
    # administration endpoint.
    - name: admin
      connect_timeout: 1s
      type: STATIC
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: admin
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    pipe:
                      path: /sockets/admin.socket

    # We could change this to be Unix sockets.
    - name: backend
      connect_timeout: 1s
      type: STATIC
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: backend
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: 127.0.0.1
                      # apiserver port
                      port_value: 8080

    # This cluster is used to send request to the rate limiting service.
    - name: ratelimiter
      connect_timeout: 1s
      type: STRICT_DNS
      dns_lookup_family: V4_ONLY
      lb_policy: ROUND_ROBIN
      http2_protocol_options: {}
      load_assignment:
        cluster_name: ratelimiter
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: limitador
                      port_value: 8081

  listeners:

    # This listener is used to accept /metrics and /ready requests.
    # Everything else will be rejected.
    - name: admin
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 9000
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                stat_prefix: admin
                http_filters:
                  - name: envoy.filters.http.router
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
                route_config:
                  name: admin
                  virtual_hosts:
                    - name: admin
                      domains:
                        - "*"
                      routes:

                        - name: metrics
                          match:
                            path: /metrics
                          route:
                            cluster: admin
                            prefix_rewrite: /stats/prometheus

                        # send /ready and /live to the apiserver (not rate limited)
                        # also only available on the internal 9000 port (not externally)
                        - name: ready
                          match:
                            path: /ready
                          route:
                            cluster: backend
                        - name: ready
                          match:
                            path: /live
                          route:
                            cluster: backend


    # This listener is used to accept inbound API requests.
    - name: ingress
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 9090
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                access_log:
                  - name: envoy.access_loggers.file
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                      path: /dev/stdout
                stat_prefix: ingress
                http_filters:

                  # This is needed to enable the rate limiter:
                  - name: envoy.filters.http.ratelimit
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.ratelimit.v3.RateLimit
                      domain: nexodus
                      failure_mode_deny: false
                      timeout: 0.05s
                      enable_x_ratelimit_headers: DRAFT_VERSION_03
                      rate_limit_service:
                        transport_api_version: V3
                        grpc_service:
                          envoy_grpc:
                            cluster_name: ratelimiter

                  # This is mandatory in order to have the HTTP routes above.
                  - name: envoy.filters.http.router
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router

                route_config:
                  name: backend
                  virtual_hosts:
                    - name: all
                      domains:
                        - "*"
                      routes:
                        - name: backend
                          match:
                            prefix: /
                          route:
                            cluster: backend
                            rate_limits:
                              - actions:
                                  - generic_key:
                                      descriptor_key: path
                                      descriptor_value: /

                # We need this in order to generate JSON responses according to
                # our API guidelines, otherwise Envoy will generate plain text
                # responses.
                local_reply_config:
                  mappers:
                    - filter:
                        status_code_filter:
                          comparison:
                            op: EQ
                            value:
                              default_value: 429
                              runtime_key: none
                      body_format_override:
                        json_format:
                          error: "Too Many Requests"
