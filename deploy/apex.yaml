kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: keycloak-postgres-pv-claim
  namespace: apex
  labels:
    app.kubernetes.io/component: keycloak
    app.kubernetes.io/instance: keycloak
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/part-of: apex
spec:
  accessModes:
    - ReadWriteOnce  # Sets read and write access
  resources:
    requests:
      storage: 5Gi  # Sets volume size
---
apiVersion: v1
kind: Service
metadata:
  name: keycloak
  namespace: apex
  labels:
    app.kubernetes.io/component: keycloak
    app.kubernetes.io/instance: keycloak
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/part-of: apex
spec:
  selector:
    app.kubernetes.io/instance: keycloak
    app.kubernetes.io/name: keycloak
  ports:
  - name: http
    port: 8080
    targetPort: 8080
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: keycloak
  namespace: apex
  labels:
    app.kubernetes.io/component: keycloak
    app.kubernetes.io/instance: keycloak
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/part-of: apex
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: keycloak
      app.kubernetes.io/instance: keycloak
      app.kubernetes.io/name: keycloak
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/component: keycloak
        app.kubernetes.io/instance: keycloak
        app.kubernetes.io/name: keycloak
    spec:
      containers:
      - name: keycloak-db
        image: quay.io/apex/postgres:latest
        imagePullPolicy: IfNotPresent    
        env:
        - name: POSTGRES_PASSWORD
          value: floofykittens
        - name: POSTGRES_USER
          value: keycloak
        resources: 
          requests:
            cpu: 100m
            memory: 200Mi
          limits:
            cpu: 100m
            memory: 200Mi
        volumeMounts:
        - mountPath: /var/lib/postgresql
          subPath: data
          name: postgresdb
      - name: keycloak
        image: quay.io/apex/keycloak:latest
        imagePullPolicy: Always
        args:
        - start
        - --optimized
        - --import-realm
        env:
        - name: KEYCLOAK_ADMIN
          value: admin
        - name: KEYCLOAK_ADMIN_PASSWORD
          value: floofykittens
        - name: KC_DB
          value: postgres
        - name: KC_DB_URL
          value: jdbc:postgresql://localhost/keycloak
        - name: KC_DB_USERNAME
          value: keycloak
        - name: KC_DB_PASSWORD
          value: floofykittens
        - name: UI_URL
          value: UI_URL_VALUE
        - name: KC_LOG_LEVEL
          value: info
        - name: KC_PROXY
          value: edge
        - name: KC_HOSTNAME_STRICT
          value: 'false'
        - name: KC_HOSTNAME_STRICT_BACKCHANNEL
          value: 'true'
        - name: KC_HOSTNAME_STRICT_HTTPS
          value: 'false'
        - name: KC_HTTP_ENABLED
          value: 'true'
        - name: PROXY_ADDRESS_FORWARDING
          value: "true"
        ports:
        - name: http
          containerPort: 8080
        - name: https
          containerPort: 8443
        resources: 
          requests:
            cpu: 100m
            memory: 200Mi
      restartPolicy: Always
      volumes:
        - name: postgresdb
          persistentVolumeClaim:
            claimName: keycloak-postgres-pv-claim
---
apiVersion: v1
kind: Service
metadata:
  name: ipam
  namespace: apex
  labels:
    app.kubernetes.io/component: ipam
    app.kubernetes.io/instance: ipam
    app.kubernetes.io/name: ipam
    app.kubernetes.io/part-of: apex
spec:
  selector:
    app.kubernetes.io/component: ipam
    app.kubernetes.io/instance: ipam
    app.kubernetes.io/name: ipam
  ports:
  - port: 9090
    targetPort: 9090
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: ipam-postgres-pv-claim
  namespace: apex
  labels:
    app.kubernetes.io/component: ipam
    app.kubernetes.io/instance: ipam
    app.kubernetes.io/name: ipam
    app.kubernetes.io/part-of: apex
spec:
  accessModes:
    - ReadWriteOnce  # Sets read and write access
  resources:
    requests:
      storage: 5Gi  # Sets volume size
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ipam
  namespace: apex
  labels:
    app.kubernetes.io/component: ipam
    app.kubernetes.io/instance: ipam
    app.kubernetes.io/name: ipam
    app.kubernetes.io/part-of: apex
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: ipam
      app.kubernetes.io/instance: ipam
      app.kubernetes.io/name: ipam
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/component: ipam
        app.kubernetes.io/instance: ipam
        app.kubernetes.io/name: ipam
    spec:
      containers:
      - name: ipam-db
        image: quay.io/apex/postgres:latest
        imagePullPolicy: IfNotPresent
        env:
        - name: POSTGRES_PASSWORD
          value: floofykittens
        - name: POSTGRES_USER
          value: ipam
        resources: 
          requests:
            cpu: 100m
            memory: 200Mi
          limits:
            cpu: 100m
            memory: 200Mi
        volumeMounts:
        - mountPath: /var/lib/postgresql
          subPath: data
          name: postgresdb
      - name: ipam
        image: ghcr.io/metal-stack/go-ipam
        imagePullPolicy: Always     
        args:
        - --grpc-server-endpoint=0.0.0.0:9090
        - postgres
        - --host=localhost
        - --dbname=ipam
        - --user=ipam
        - --password=floofykittens
        resources: 
          requests:
            cpu: 100m
            memory: 200Mi
          limits:
            cpu: 100m
            memory: 200Mi
      restartPolicy: Always
      volumes:
        - name: postgresdb
          persistentVolumeClaim:
            claimName: ipam-postgres-pv-claim
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: controller-postgres-pv-claim
  namespace: apex
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: controller
    app.kubernetes.io/name: controller
    app.kubernetes.io/part-of: apex
spec:
  accessModes:
    - ReadWriteOnce  # Sets read and write access
  resources:
    requests:
      storage: 5Gi  # Sets volume size
---
apiVersion: v1
kind: Service
metadata:
  name: controller
  namespace: apex
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: controller
    app.kubernetes.io/name: controller
    app.kubernetes.io/part-of: apex
spec:
  selector:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: controller
    app.kubernetes.io/name: controller
  ports:
    - port: 8080
      targetPort: 8080
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: controller
  namespace: apex
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: controller
    app.kubernetes.io/name: controller
    app.kubernetes.io/part-of: apex
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: controller
      app.kubernetes.io/name: controller
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: controller
        app.kubernetes.io/name: controller
    spec:
      containers:
      - name: controller-db
        image: quay.io/apex/postgres:latest
        imagePullPolicy: IfNotPresent
        env:
        - name: POSTGRES_PASSWORD
          value: floofykittens
        - name: POSTGRES_USER
          value: controller
        resources: 
          requests:
            cpu: 100m
            memory: 200Mi
          limits:
            cpu: 100m
            memory: 200Mi
        volumeMounts:
        - mountPath: /var/lib/postgresql
          subPath: data
          name: postgresdb
      - name: controller
        image: quay.io/apex/controller:latest
        imagePullPolicy: Always
        args:
        - --db-address=localhost
        - --db-password=floofykittens
        - --ipam-address=http://ipam.apex.svc.cluster.local:9090
        env:
        - name: APEX_CONTROLLER_LOGLEVEL
          value: debug
        resources: 
          requests:
            cpu: 100m
            memory: 200Mi
          limits:
            cpu: 100m
            memory: 200Mi
      restartPolicy: Always
      volumes:
        - name: postgresdb
          persistentVolumeClaim:
            claimName: controller-postgres-pv-claim
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
  namespace: apex
  labels:
    app.kubernetes.io/component: frontend
    app.kubernetes.io/instance: frontend
    app.kubernetes.io/name: frontend
    app.kubernetes.io/part-of: apex
spec:
  selector:
    app.kubernetes.io/component: frontend
    app.kubernetes.io/instance: frontend
    app.kubernetes.io/name: frontend
  ports:
    - port: 3000
      targetPort: 3000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: apex
  labels:
    app.kubernetes.io/component: frontend
    app.kubernetes.io/instance: frontend
    app.kubernetes.io/name: frontend
    app.kubernetes.io/part-of: apex
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: frontend
      app.kubernetes.io/instance: frontend
      app.kubernetes.io/name: frontend
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/component: frontend
        app.kubernetes.io/instance: frontend
        app.kubernetes.io/name: frontend
    spec:
      containers:
      - name: frontend
        image: quay.io/apex/controller-ui:latest
        imagePullPolicy: Always
        env:
        - name: VITE_KEYCLOAK_URL
          value: /auth
        - name: VITE_KEYCLOAK_REALM
          value: controller
        - name: VITE_KEYCLOAK_CLIENT_ID
          value: front-controller
        - name: VITE_CONTROLLER_URL
          value: /api
        resources: 
          requests:
            cpu: 100m
            memory: 200Mi
          limits:
            cpu: 100m
            memory: 200Mi
      restartPolicy: Always
---